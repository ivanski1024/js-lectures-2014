class: center, middle
# Тестове

---
# Философска обосновка

* Писането на тестове ни позволява да контролираме дизайн решенията, които правим за кода си.
* Писането на тестове ни позволява по-уверено да правим промени и да експериментираме с нови решения.
* Писането на тестове ни дава възможност да дадем пример как очакваме, че ще се ползва нашия код.
* Писането на тестове ни насочва кои части от кода ни е нужно да бъдат достъпни от вън и кои не.

…

---
# Философски disclaimer

* Тестовете **НЕ СА** заместител на документация
* Тестовете **НЕ СА** формално доказателство за коректност
* Тестовете **НЕ СА** неформално доказателство за коректност
* Тестовете **НЕ СА** заместител на QA екипа

…

---
# Unit тестове

Тестове на малки парчета код(една функция, един клас) в изолация от останалата част от приложението.

---
# Интеграционни тестове

Тестове на взаимодействието между няколко парчета код(функции, класове).

---
# Функционални тестове

Тест на цялостната функционалност на приложението. Опитваме се да си напишем QA bot.

---
# Testing frameworks

Можем да подходим каубойски и да пишем тестове само с викане на `assert`.

--

Доста бързо ще ни писне и ще се отчаяме от живота.

---
# Chai

[Chai](http://chaijs.com/) е assertion библиотека за javascript, която можем да ползваме и в node и в браузъра. Поддържа `expect().to` и `.should` API.

Има plugin система. Пример за плъгин е [Chai as Promised](http://chaijs.com/plugins/chai-as-promised), скойто по-лесно се тестват promise-и.

---
# Test case & test suite

Test case е малко парче код, което тества едно конкретно нещо(може д абъде един конкретен интеграционен тест или един конкретен функционален тест)

Test suite е съвкупност от логически свързани test case-ове.

---
# Mocha

[Mocha](http://mochajs.org/#getting-started) е библиотека за изпълнение на тестове(test runner). Може да бъде ползване с която и да е assertion библиотека(примерно chai или вградения в node `assert`). Поддържа [няколко интерфейса](http://mochajs.org/#interfaces) за дефиниране на тестове.

---

# Jasmine

[Jasmine](http://jasmine.github.io/) е assertion библиотека *и* test runner.

[примери](https://github.com/mhevery/jasmine-node/tree/master/spec)

---
#stubs, mocks

При тестването на код, често пъти се налага да „лъжем“ какво се случва, за да предизвикаме съответна реакция от тествания метод/клас/etc.

Това се постига със stub-ове и mock-ове - обекти, чиято цел е да приличат на други обекти и/или да се държат като тях. Тоест да имат същия публичен интерфейс водещ до същите резултати.

---
#007

Понякога тестваната функционалност е по-сложно дефинирана.

„Функцията `stringify` трябва да извиква методът `toString` на аргумента си.“

За тази цел се използват spy обекти. Това са обекти, които отговарят на конкретен или произволен интерфейс и пазят информация за това какви методи и с какви аргументи са били извикани чрез тях.

---
# Sinon

[Sinon](http://sinonjs.org/) е библиотека имплементираща stub-ове, mock-ове и spy обекти, има и [plugin за chai](http://chaijs.com/plugins/sinon-chai).
